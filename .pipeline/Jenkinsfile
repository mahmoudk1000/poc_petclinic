library "jenkins-shared-library@stable"

def imageName = 'mahmoudk1000/petclinic'

pipeline {
    agent {
        kubernetes {
            inheritFrom 'default'
            yamlFile '.pipeline/podtemplate.yaml'
            defaultContainer 'jnlp'
        }
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                container('maven') {
                    withSonarQubeEnv(installationName: 'SonarQubeServer', credentialsId: 'SonarQubeToken') {
                        sh label: "Running SCA Test",
                            script: "./mvnw clean verify sonar:sonar -Dsonar.projectKey=petclinic -Dsonar.projectName='petclinic'"
                    }
                }
            }
        }
        stage('Build Artifact') {
            steps {
                container('maven') {
                    script {
                        def tag = sh(script: './mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                        sh label: "Building Artifact",
                            script: "./mvnw package -DskipTests"
                    }
                }
            }
        }
        stage('Building Image Using Kaniko') {
            steps {
                container (name: 'kaniko', shell: '/busybox/sh') {
                    script {
                        kanikoBuildPush(imageName, tag)
                    }
                }
            }
        }
        stage('Choose Environment for Main Branch') {
            when {
                branch 'main'
            }
            steps {
                script {
                    def userInput = input(
                        id: 'userInput', message: 'Choose the environment to deploy to:', parameters: [
                            choice(name: 'ENVIRONMENT', choices: ['Production', 'Staging'], description: 'Select the environment')
                        ]
                    )
                    if (userInput == 'Production') {
                        echo 'Deploying to Production environment.'
                    } else if (userInput == 'Staging') {
                        echo 'Deploying to Staging environment.'
                    }
                }
            }
        }
        stage('Deploy Devleopment') {
            when {
                branch 'dev'
            }
            steps {
                echo 'Deploying soon IsA.'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
