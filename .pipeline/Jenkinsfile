library "jenkins-shared-library@stable"

def appName = 'petclinic'
def regDest = 'registry.labbi.lab:30443'
def pomVersion = 'latest'

pipeline {
    agent {
        kubernetes {
            inheritFrom 'default'
            yamlFile '.pipeline/agents.yaml'
            defaultContainer 'jnlp'
        }
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                container('maven') {
                    script {
                        withSonarQubeEnv(installationName: 'SonarQubeServer', credentialsId: 'SonarQubeToken') {
                            sh label: "Running SCA Test",
                                script: "./mvnw clean verify sonar:sonar -Dsonar.projectKey=petclinic -Dsonar.projectName='petclinic'"
                        }
                    }
                }
            }
        }
        stage('Build Artifact') {
            when {
                anyOf {
                    branch 'main'
                    branch 'release'
                    branch 'dev'
                }
            }
            steps {
                container('maven') {
                    script {
                        pomVersion = sh(script: './mvnw help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true).trim()
                        sh label: "Building Artifact",
                            script: "./mvnw package -DskipTests"
                    }
                }
            }
        }
        stage('Building Image Using Kaniko') {
            when {
                anyOf {
                    branch 'main'
                    branch 'release'
                    branch 'dev'
                }
            }
            steps {
                container (name: 'kaniko', shell: '/busybox/sh') {
                    script {
                        kanikoBuildPush(regDest, appName, pomVersion)
                    }
                }
            }
        }
        stage('Deploy Development') {
            when {
                branch 'dev'
            }
            steps {
                container('helm') {
                    dir('.pipeline/helm') {
                        script {
                            helmInstall(appName, "dev-values", pomVersion, "${appName}-dev")
                        }
                    }
                }
            }
        }
        stage('Deploy Stage') {
            when {
                branch 'release'
            }
            steps {
                container('helm') {
                    dir('.pipeline/helm') {
                        script {
                            helmInstall(appName, "tst-values", pomVersion, "${appName}-tst")
                        }
                    }
                }
            }
        }
        stage('Deploy Production') {
            when {
                branch 'main'
            }
            steps {
                container('helm') {
                    dir('.pipeline/helm') {
                        script {
                            helmInstall(appName, "prd-values", pomVersion, "${appName}-prd")
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
