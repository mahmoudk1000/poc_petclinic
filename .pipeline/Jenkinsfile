library "jenkins-shared-library@stable"

pipeline {
    agent {
        kubernetes {
            inheritFrom 'default'
            yamlFile '.pipeline/podtemplate.yaml'
            defaultContainer 'jnlp'
        }
    }

    environment {
        IMAGE_NAME = "petclinic"
        COMMIT_SHA = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
    }

    stages {
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv(installationName: 'SonarQubeServer', credentialsId: 'SonarQubeToken') {
                    sh label: "Running SCA Test",
                        script: "./mvnw clean verify sonar:sonar -Dsonar.projectKey=petclinic -Dsonar.projectName='petclinic'"
                }
            }
        }
        stage('Build Artifact') {
            steps {
                container('maven') {
                    script {
                        sh label: "Building Artifact",
                            script: "./mvnw package -DskipTests"
                    }
                }
            }
        }
        stage('Building Image Using Kaniko') {
            steps {
                container (name: 'kaniko', shell: '/busybox/sh') {
                    script {
                        kanikoBuildPush(imageName: "${IMAGE_NAME}", tag: "${COMMIT_SHA}")
                    }
                }
            }
        }
        stage('Deploy Production') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                }
            }
            steps {
                echo 'Deploying soon IsA.'
            }
        }
        stage('Deploy Staging') {
            when {
                anyOf {
                    branch 'dev'
                }
            }
            steps {
                echo 'Deploying soon IsA.'
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
